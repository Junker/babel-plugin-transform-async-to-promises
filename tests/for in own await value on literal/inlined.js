function(foo){try{var key;function _temp3(){return values.sort();}var values=[];const _temp2=_forIn(foo,function(key){const _temp=function(){if({}.hasOwnProperty.call(foo,key)){const _push=values.push;return Promise.resolve(foo[key]()).then(function(_foo$key){_push.call(values,_foo$key);});}}();if(_temp&&_temp.then)return _temp.then(function(){});});return Promise.resolve(_temp2&&_temp2.then?_temp2.then(_temp3):_temp3(_temp2));}catch(e){return Promise.reject(e);}}