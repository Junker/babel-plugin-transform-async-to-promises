function _asyncIterator(iterable){var method;if(typeof Symbol!=="undefined"){if(Symbol.asyncIterator){method=iterable[Symbol.asyncIterator];if(method!=null)return method.call(iterable);}if(Symbol.iterator){method=iterable[Symbol.iterator];if(method!=null)return method.call(iterable);}}throw new TypeError("Object is not async iterable");}const foo=_async(()=>{let _exit=false;var _iterator,_step,_value;const out=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError;return _continue(_finallyRethrows(()=>_catch(()=>{_iterator=_asyncIterator([1,2]);return _continueIgnored(_for(()=>{let _exit2=false;return _await(_iterator.next());},void 0,()=>{}));},err=>{_didIteratorError=true;_iteratorError=err;}),(_wasThrown,_result)=>{return _continue(_finallyRethrows(()=>_invokeIgnored(()=>{if(!_iteratorNormalCompletion&&_iterator.return!=null){return _awaitIgnored(_iterator.return());}}),(_wasThrown2,_result2)=>{if(_didIteratorError){throw _iteratorError;}return _rethrow(_wasThrown2,_result2);}),_result2=>_exit2?_result2:_rethrow(_wasThrown,_result));}),_result=>_exit2?_result:out);});export default foo;foo().then(console.log);