function _asyncIterator(iterable){var method;if(typeof Symbol!=="undefined"){if(Symbol.asyncIterator){method=iterable[Symbol.asyncIterator];if(method!=null)return method.call(iterable);}if(Symbol.iterator){method=iterable[Symbol.iterator];if(method!=null)return method.call(iterable);}}throw new TypeError("Object is not async iterable");}const foo=_async(function(){let _exit;var _iteratorError,_iterator,_step,_value;function _temp7(_wasThrown2,_result2){if(_didIteratorError){throw _iteratorError;}return _rethrow(_wasThrown2,_result2);}function _temp6(){return _invokeIgnored(_temp5);}function _temp5(){if(!_iteratorNormalCompletion&&_iterator.return!=null){return _awaitIgnored(_iterator.return());}}function _temp4(){const item=_value;out.push(item);}function _temp3(){return!!(_iteratorNormalCompletion=true);}function _iterator$next2(){return _await(_iterator.next(),_temp2);}function _temp2(_iterator$next){const _iteratorNormalComple=_iteratorNormalCompletion=_step.done,_step2=_step=_iterator$next;return _await(_step.value,_temp);}function _temp(_step$value){return _value=_step$value,!_iteratorNormalCompletion;}const out=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;return _continue(_finallyRethrows(function(){return _catch(function(){_iterator=_asyncIterator([1,2]);return _continueIgnored(_for(_iterator$next2,_temp3,_temp4));},function(err){_didIteratorError=true;_iteratorError=err;});},function(_wasThrown,_result){return _continue(_finallyRethrows(_temp6,_temp7),function(_result2){return _exit?_result2:_rethrow(_wasThrown,_result);});}),function(_result){return _exit?_result:out;});});export default foo;foo().then(console.log);